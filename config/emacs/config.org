#+STARTUP: fold
#+babel: :cache yes
#+PROPERTY: header-args:emacs-lisp :results silent

* My Emacs configuration

Inspired by Doom Emacs, but using a kakoune-like keymap.

* Goals

** Multi-platform

The configuration should support Linux and MacOS. Fuck you Windows.

** Consistency and Modernity

Be as idiomatic as possible.

Every feature provided by ~use-package~ is used over calling elisp functions. 
That means ~:custom~ is preferred over ~setq~, ~:hook~ over ~add-hook~, etc.
where possible.

* Startup

Eamcs startup times can be painful, if let uncontrolled. With a somewhat basic
config like this one still resulting in multi-second startup times, its a
frequent topic of debate. Distributions like =doom-emacs= use fast startup times
as one of the main selling points. Let's try to pull in all the wisdom on how to
keep our config faaast.

* Early Init
:PROPERTIES:
:header-args+: :tangle early-init.el
:END:

In Emacs 27+, package initialization occurs before ~user-init-file~ is loaded,
but after ~early-init-file~. We handle package initialization, so we must prevent
Emacs from doing it early!

#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

*** Native compile

Disable runtime compilation as everything will be compiled at build time via Nix

#+begin_src emacs-lisp
;; Disabled for now as I can't find the correct variable to use here in Emacs 29+
;; (when (featurep 'nativecomp)
;;  (setq comp-async-compilation nil))
#+end_src

*** Disable Emacs frame resizing during startup

Resizing the Emacs frame can be a terrible expensive part of changing the font.
By inhibiting this, we easily halve startup times with fonts that are larger than
the system default.

#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src

*** Disable GUI components

Prevent the glimpse of un-styled Emacs by disabling these UI elements early.

#+begin_src emacs-lisp
(setq use-dialog-box nil)
(menu-bar-mode -1)

(unless (and (display-graphic-p) (eq system-type 'darwin))
    (push '(menu-bar-lines . 0) default-frame-alist))

(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

*** Ignore X resources.

#+begin_src emacs-lisp
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

*** Reduce GC

Following [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly]][[Doom-Emacs FAQ]],
we max the garbage collection threshold on startup, and reset it to the original
value after.

#+begin_src emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold (* 16 1024 1024))
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold me/gc-cons-threshold
                  gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy
  ;; the benefits
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
(setq garbage-collection-messages t)
#+end_src

*** Temporarily avoid special handling of files

We also set the ~file-name-handler-alist~ to an empty list, and reset it after
Emacs has finished initializing.

#+begin_src emacs-lisp
(defvar me/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist me/file-name-handler-alist)))
#+end_src

*** Disable ~site-run-file~

TODO: explain this.

#+begin_src emacs-lisp
(setq site-run-file nil)
#+end_src

*** Don't compact font caches

#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

*** Improve I/O

Optimizations for improving I/O performance. Increase max bytes read from a 
sub-process in a single op (Emacs 27+).

#+begin_src emacs-lisp
(when (boundp 'read-process-output-max)
  ;; 4MB in bytes, default 4096 bytes.
  (setq read-process-output-max (* 4 1024 1024)))
#+end_src

*** Don't load default library

#+begin_src emacs-lisp
(setq inhibit-default-init t)
#+end_src

*** Use ~fundamental-mode~ to reduce hooks

#+begin_src emacs-lisp
(setq initial-major-mode 'fundamental-mode)
#+end_src

*** Benchmark

Let's prin a message to the =*messages*= buffer with the total startup time.

#+begin_src emacs-lisp
(add-hook
 'emacs-startup-hook
 (lambda ()
   (message "Emacs ready in %.2f seconds with %d garbage collections."
            (float-time (time-subtract after-init-time before-init-time))
            gcs-done)))
#+end_src

*** End early init

#+begin_src emacs-lisp
(provide 'early-init)
#+end_src

* Base
:PROPERTIES:
:header-args+: :tangle init.el
:END:

** Lexical Binding

Make elisp in this file behave like we expect these days. Everyone has this set,
but no one explains why.

In non-elisp speak, it adds proper scoping and "closure" behaviour to variables.
[[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding]][[This Emacswiki article explains it well]].

#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t ; eval: (view-mode -1) -*-
#+end_src

Enable ~view-mode~, which both makes the file read-only (as a reminder that 
~init.el~ is an auto-generated file, not supposed to be edited), and provides
some convenient key bindings for browinsg through the file.

** Constants

Let's define some constants we use throughout our config.

First, what OS we're using.

#+begin_src emacs-lisp
(defconst *is-windows* (eq system-type 'windows-nt))
(defconst *is-unix* (not *is-windows*))
(defconst *is-macos* (eq system-type 'darwin))
(defconst *is-linux* (eq system-type 'linux))
#+end_src

** Variables

Provide an easy way to toggle debug mode which will set certain variables to
produce more informative output. It can be set either by providing the enviroment
variable ~DEBUG~ or start Emacs with ~--debug-init~.

#+begin_src emacs-lisp
(eval-and-compile
  (defvar init-file-debug f
    "Wether debug is enabled or not."))


(when (getenv "DEBUG")
  (setq init-file-debug t))
(setq debug-on-error (and (not noninteractive) init-file-debug))
#+end_src

Provide a location where Emacs can store data and cache.

#+begin_src emacs-lisp
(eval-and-compile
  (defvar data-dir
    (if (getenv "XDG_DATA_HOME")
        (concat (getenv "XDG_DATA_HOME") "/emacs/")
      (expand-file-name "~/.local/share/emacs/"))
    "Directory for data.")
    
  (defvar cache-dir
    (if (getenv "XDG_CACHE_HOME")
        (concat (getenv "XDG_CACHE_HOME") "/emacs/")
      (expand-file-name "~/.cache/emacs/"))
    "Directory for cache.")

  (defvar pictures-dir
    (or (getenv "XDG_PICTURES_DIR")
        (expand-file-name "~/Pictures/"))
    "Directory for pictures."))
#+end_src

** Package management

Use generated package autoloads. These will be provided by the Nix package.

#+begin_src emacs-lisp
(defvar package-quickstart t)
#+end_src

*** Load path

Add local and private libraries to ~load-path~.

#+begin_src emacs-lisp
(eval-and-compile
  (setq load-path
        (append (delete-dups load-path)
                (list (expand-file-name "lisp" user-emacs-directory)
                      (expand-file-name "private" user-emacs-directory)))))
#+end_src

*** Customization

Put custom definitions in a temporary file so it doesn't grow over time. This
means all customizations will disappear upon reboot and instead needs to be
managed via the initialization file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" temporary-file-directory))
#+end_src

*** ~use-package~

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)
  
  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
    (setq use-package-verbose nil
          use-package-expand-minimally t))
#+end_src

*** ~auto-minor-mode~

Enable minor mods by buffer name and contents. It provides the ~use-package~
keyword ~:minor~ and ~:magic-minor~ where you can specify these rules.

#+begin_src emacs-lisp
(use-package auto-minor-mode
  :ensure t
  :init
  (eval-when-compile
    (require 'auto-minor-mode)))
#+end_src

*** ~no-littering~

Help keeping ~user-emacs-directory~ clean.

#+begin_src emacs-lisp
(use-package no-littering
  :ensure t
  :demand t
  :init
  (setq no-littering-etc-directory data-dir
        no-littering-var-directory cache-dir))
#+end_src

** Performance

No second pass of case-insensitive search over ~auto-mode-alist~.

#+begin_src emacs-lisp
(setq auto-mode-case-fold nil)
#+end_src

Giveup some bidirectional functionality for slightly faster re-display.

#+begin_src emacs-lisp
(setq bidi-inhibit-bpa t)
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)
#+end_src

Update UI less frequently.

#+begin_src emacs-lisp
(setq idle-update-delay 1.0
      jit-lock-defer-time 0)
#+end_src

Accelerate scrolling with the trade-off of sometimes delayed accurate fontification.

#+begin_src emacs-lisp
(setq fast-but-imprecise-scrolling t)
#+end_src

*** Use the GC magic hack

Adjust GC threshold depending on activity and try to run garbage collection during 
idle instead.

#+begin_src emacs-lisp
(use-package gcmh
  :ensure t
  :hook
  (after-init-hook . gcmh-mode)
  :init
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 64 1024 1024)
        gcmh-verbose init-file-debug))
#+end_src

*** ~explain-pause-mode~

Track how much time is spent in each function and present a view to investigate
this data.

#+begin_src emacs-lisp
(use-package explain-pause-mode
  :ensure t
  :commands
  (explain-pause-mode)
  :init
  (when init-file-debug
    (explain-pause-mode 1)))
#+end_src

*** ~so-long~

Improve performance for files with long lines, for example minified code.

#+begin_src emacs-lisp
(use-package so-long
  :defer 2
  :config
  (global-so-long-mode 1))
#+end_src

*** ~vlf~

Large file support. This can view/edit/search and compare large files.

#+begin_src emacs-lisp
(use-package vlf :ensure t)
#+end_src

** Libraries

*** ~all-the-icons~

Library for displaying icons.

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :commands
  (all-the-icons-faicon all-the-icons-octicon))
#+end_src

*** ~cl-lib~

Library providing functions inspired by Common Lisp. In many cases these feel
more natual to use.

#+begin_src emacs-lisp
(require 'cl-lib)
#+end_src

*** ~flymake-quickdef~

Library to quickly define backends for ~flymake~.

#+begin_src emacs-lisp
(use-package flymake-quickdef
  :ensure t
  :commands
  (flymake-quickdef-backend))
#+end_src

*** ~hide-lines~

Library to hide lines based on a regular expression.

#+begin_src emacs-lisp
(use-package hide-lines :ensure t)
#+end_src

*** ~quick-peek~

Library to display inline popups; used by ~source-peek~.

#+begin_src emacs-lisp
(use-package quick-peek :ensure t)
#+end_src

** Make Emacs Sensible

Essentially what ~vim-sensible~ does, but we use ~better-defaults~ in emacs. As
it doesn't do everything, we need to help it out a little bit.

#+begin_src emacs-lisp
(use-package better-defaults :ensure t :demand t)

(setq default-directory "~/"
      ;; always follow symlinks when opening files
      vc-follow-symlinks t
      ;; overwrite text when selected, like we expect.
      delete-selection-mode t
      ;; quiet startup
      inhibit-startup-message t
      initial-scratch-message nil
      ;; hopefully all themes we install are safe
      custom-safe-themes t
      ;; simple lock/backup file management
      create-lockfiles nil
      backup-by-copying t
      delete-old-versions t
      ;; when quiting emacs, just kill processes
      confirm-kill-processes nil
      ;; ask if local variables are safe once.
      enable-local-variables t)
      
;; use human-readable sizes in dired
(setq-default dired-listing-switches "-alh")

;; always highlight code
(global-font-lock-mode 1)

;; refresh a buffer if changed on disk
(global-auto-revert-mode 1)
#+end_src

** UTF-8 by default

Emacs is very conservative about assuming encoding. Everything is utf-8 these days,
lets have that as the default.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)

(when *is-windows*
  (set-w32-system-coding-system 'utf-8))
#+end_src

** Functions

Prevents forms from producing output or other noise.

#+begin_src emacs-lisp
(defmacro quiet! (&rest forms)
  "run FORMS without making any noise."
  `(if init-file-debug
       (progn ,@forms)
     (let ((message-log-max nil))
       (with-temp-message (or (current-message) "") ,@forms))))
    
(defun quite-function-advice (orig-fn &rest args)
  "Advice used to make a function quiet.
Call ORIG-FN with ARGS and suppress the output.

Example:
  (advice-add 'orig-fn :around #'quite-function-advice)"
  (quiet! (apply orig-fn args)))
#+end_src

*** Display

#+begin_src emacs-lisp
(defun display-ctrl-M-as-newline ()
  "Display `^M` as newline."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M [?\n]))
#+end_src

*** Frame

Screenshot current frame in ~.png~ format.

#+begin_src emacs-lisp
(defun screenshot (type)
  "Save a screenshot of the current frame as an image in TYPE format.
Saves to atemp file and puts the filename in the kill ring."
  (let* ((ext (concat "." (symbol-name type)))
         (filename (make-temp-file "Emacs-" nil ext))
         (data (x-emport-frames nil type)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))
    
(defun screenshot-png ()
  "Save a screenshot of the current frame as a PNG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (screenshot 'png))
#+end_src

*** Window

Dedicated window:

#+begin_src emacs-lisp
(defun toggle-dedicated-window ()
  "Toggle selected window as dedicated window."
  (interactive)
  (set-window-dedicated-p (selected-window)
                          (not (window-dedicated-p (selected-window)))))
#+end_src

Fringe control:

#+begin_src emacs-lisp
(defun no-fringes ()
  "Remove all fringes."
  (interactive)
  (set-window-fringes (selected-window) 0 0 nil))
  
(defun restore-fringes ()
  "Restore fringes."
  (interactive)
  (set-window-fringes (selected-window) 8 8 t))
#+end_src

** History

*** ~savehist~

Persist history.

#+begin_src emacs-lisp
(use-package savehist
  :hook
  (after-init-hook . savehist-mode)
  :custom
  (savehist-additional-variables '(kill-ring
                                   search-ring
                                   regexp-search-ring))
  (savehist-autosave-interval 90)
  (savehist-save-minibuffer-history t))
#+end_src

** Shell

Set shell to bash as fish is not compatible with all packages using the shell.

#+begin_src emacs-lisp
(setq shell-file-name "bash")
#+end_src

** UX

Disable bell (both visual and audible).

#+begin_src emacs-lisp
(setq ring-bell-function #'ignore
      visible-bell nil)
#+end_src

Use ~y~/~n~ insteadll of ~yes~/~no~.

#+begin_src emacs-lisp
(setq confirm-kill-emacs #'y-or-n-p)
(fset #'yes-or-no-p #'y-or-n-p)
#+end_src

Hide ~M-x~ commands which does not work in the current buffer.

#+begin_src emacs-lisp
(setq read-extended-command-predicate #'command-completion-default-include-p)
#+end_src

Improve scrolling.

#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-conservatively 101
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1 ((shift) . 5))
      mouse-wheel-follow-mouse t
      scroll-margin 3)
#+end_src

Wrap lines that are too long.

#+begin_src emacs-lisp
(setq truncate-lines nil)
#+end_src

Don't resize frames a character at a time, but use pixels.

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src

* Appearance
:PROPERTIES:
:header-args+: :tangle init.el
:END:

First, the fonts we will use. Note that these are evaluated during
compilation, as these values are passed by Nix when building the config.

#+begin_src emacs-lisp
(defconst *fixed-pitch-font*
  (eval-when-compile (getenv "EMACS_MONO_FONT_FAMILY")))

(defconst *variable-pitch-font*
  (eval-when-compile (getenv "EMACS_VARIABLE_PITCH_FONT_FAMILY")))

(defconst *serif-font*
  (eval-when-compile (getenv "EMACS_SERIF_FONT_FAMILY")))
  
(defconst *unicode-font*
  (eval-when-compile (getenv "EMACS_UNICODE_FONT_FAMILY")))

(defconst *emoji-font*
  (eval-when-compile (getenv "EMACS_EMOJI_FONT_FAMILY")))
  
(defconst *symbol-fonts* '(*emoji-font* "Symbola"))
#+end_src

Now, some sizes.

#+begin_src emacs-lisp
(defconst *line-spacing* 0.25)

(defconst *text-font-height*
  (eval-when-compile (* 10 (string-to-number (getenv "EMACS_TEXT_FONT_SIZE")))))
(defconst *ui-font-height*
  (eval-when-compile (* 10 (string-to-number (getenv "EMACS_UI_FONT_SIZE")))))
#+end_src

*** Symbols face

Setup symbol fonts.

#+begin_src emacs-lisp
(dolist (font *symbol-fonts*)
  (set-fontset-font t 'symbol font nil 'append))
#+end_src

*** Line length/spacing

#+begin_src emacs-lisp
(setq-default fill-column 90)
(setq-default line-spacing *line-spacing*)
#+end_src

*** Underline 

Underline at a descent position, not baseline position.

#+begin_src emacs-lisp
(setq x-underline-at-descent-line t)
#+end_src

** Themes

We will load a bunch of themes. We need to `:defer` them, to prevent each theme
getting loaded upon init, and flasing emacs and conflicting with each other.

#+begin_src emacs-lisp
(use-package doom-themes
  :defer t
  :config
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)
  (doom-themes-set-faces nil
    ;; extending faces breaks orgmode collapsing for now
    '(org-block-begin-line :extend nil)
    '(org-block-end-line :extend nil)
    ;; Different sized heading are nice.
    '(outline-1 :height 1.3)
    '(outline-2 :height 1.1)
    '(outline-3 :height 1.0)))
    
(load-theme 'doom-dracula t)
    
#+end_src

** Fonts

The [[https://github.com/rolandwalker/unicode-fonts]][[unicode-fonts]] package
helps Eamcs use the full range of unicode characters provided by most fonts.

We set a regular font and a ~variable-pitch~ one, the latter is used by ~mixed-pitch-mode~
to render regular text with a proportional font.

#+begin_src emacs-lisp
(use-package persistent-soft
  :ensure t
  :demand t)
  
(use-package unicode-fonts
  :ensure t
  :demand t
  :after persistent-soft
  :config
  (unicode-fonts-setup)
  (custom-set-faces
    `(default ((t (:family ,*fixed-pitch-font*
                   :height ,*default-font-height*))))
    `(variable-pitch ((t (:family ,*variable-pitch-font*
                          :height ,*default-font-height*))))))
#+end_src

** Layout

*** Frame

See Frame Layout documentation for deatils and terminology.

- Add some padding around the whole window (~internal-border-width~) to provide 
  some air.
- Remove GUI elements.
- Make the title-bar transparent on macOS.

#+begin_src emacs-lisp
(setq default-frame-alist
      '((undercorated . t)
        (internal-border-width . 16)
        (vertical-scroll-bar . nil)
        (menu-bar-lines . 0)
        (tool-bar-lines . 0)))
        
(when *is-macos*
  (setq frame-title-format nil)
  (dolist (filter '((ns-transparent-titlebar . t)
                     (ns-appearance . unbound)))
    (cl-pushnew filter default-frame-alist :test #'equal)))
#+end_src

*** Fringe

Setup fringes on both sides and disaply an indicator for buffer obundaries on 
the right side. Display fringes outside margins to have the padding on the inside.

#+begin_src emacs-lisp
(setq-default fringes-outside-margins t
              left-fringe-width 8
              right-fringe-width 8
              indiccate-buffer-boundaries 'right)
#+end_src

*** Padding

Add margins inside windows to make text fell less crowded. Padding around the frame
is configured via the ~internal-border-width~ in the Frame section.

#+begin_src emacs-lisp
(setq-default left-margin-width 1
              right-margin-width 1)
#+end_src

*** Borders

Add window dividers, mainly to add a border below the mode line.

#+begin_src emacs-lisp
(use-package frame
  :hook
  (server-after-make-frame-hook . window-divider-mode)
  :custom
  (window-divider-default-places t)
  (window-divider-default-bottom-width 1)
  (window-divider-default-right-width 1))
#+end_src

** Mode line

Bla